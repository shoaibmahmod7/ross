import numpy as np
import pytest
from numpy.testing import assert_allclose

import ross as rs
from ross.units import Q_


@pytest.fixture
def rotor():
    steel2 = rs.Material(name="Steel", rho=7850, E=2.17e11, Poisson=0.2992610837438423)

    #  Rotor with 6 DoFs, with internal damping, with 10 shaft elements, 2 disks and 2 bearings.
    i_d = 0
    o_d = 0.019

    # fmt: off
    L = np.array([
        0  ,  25,  64, 104, 124, 143, 175, 207, 239, 271,
        303, 335, 345, 355, 380, 408, 436, 466, 496, 526,
        556, 586, 614, 647, 657, 667, 702, 737, 772, 807,
        842, 862, 881, 914
    ])/ 1000
    # fmt: on

    L = [L[i] - L[i - 1] for i in range(1, len(L))]

    shaft_elem = [
        rs.ShaftElement6DoF(
            l,
            i_d,
            o_d,
            material=steel2,
            alpha=8.0501,
            beta=1.0e-5,
        )
        for l in L
    ]

    Id = 0.003844540885417
    Ip = 0.007513248437500

    disk0 = rs.DiskElement6DoF(n=12, m=2.6375, Id=Id, Ip=Ip)
    disk1 = rs.DiskElement6DoF(n=24, m=2.6375, Id=Id, Ip=Ip)

    kxx1 = 4.40e5
    kyy1 = 4.6114e5
    kzz = 0
    cxx1 = 27.4
    cyy1 = 2.505
    czz = 0
    kxx2 = 9.50e5
    kyy2 = 1.09e8
    cxx2 = 50.4
    cyy2 = 100.4553

    bearing0 = rs.BearingElement6DoF(
        n=4, kxx=kxx1, kyy=kyy1, kzz=kzz, cxx=cxx1, cyy=cyy1, czz=czz
    )
    bearing1 = rs.BearingElement6DoF(
        n=31, kxx=kxx2, kyy=kyy2, kzz=kzz, cxx=cxx2, cyy=cyy2, czz=czz
    )

    return rs.Rotor(shaft_elem, [disk0, disk1], [bearing0, bearing1])


@pytest.fixture
def common_parameters():
    unbalance_magnitudet = np.array([5e-4, 0])
    unbalance_phaset = Q_(np.array([-90.0, 0.0]), "degrees")

    return dict(
        coupling="flex",
        dt=0.1,
        tI=0,
        tF=5,
        kd=40 * 10 ** (3),
        ks=38 * 10 ** (3),
        eCOUPx=2 * 10 ** (-4),
        eCOUPy=2 * 10 ** (-4),
        misalignment_angle=5 * np.pi / 180,
        TD=0,
        TL=0,
        n1=0,
        speed=Q_(1200, "RPM"),
        unbalance_magnitude=unbalance_magnitudet,
        unbalance_phase=unbalance_phaset,
        print_progress=False,
    )


@pytest.fixture
def mis_comb(rotor, common_parameters):

    return rotor.run_misalignment(mis_type="combined", **common_parameters)


def test_mis_comb_parameters(mis_comb):
    assert mis_comb.dt == 0.1
    assert mis_comb.tI == 0
    assert mis_comb.tF == 5
    assert mis_comb.kd == 40 * 10 ** (3)
    assert mis_comb.ks == 38 * 10 ** (3)
    assert mis_comb.eCOUPx == 2 * 10 ** (-4)
    assert mis_comb.eCOUPy == 2 * 10 ** (-4)
    assert mis_comb.misalignment_angle == 5 * np.pi / 180
    assert mis_comb.TD == 0
    assert mis_comb.TL == 0
    assert mis_comb.n1 == 0
    assert mis_comb.speed == 125.66370614359172


def test_mis_comb_forces(mis_comb):
    # fmt: off
    Fx_n1_comb = np.array([
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605, -4.40605, -4.40605, -4.40605,
        -4.40605, -4.40605, -4.40605
    ])

    Fy_n1_comb = np.array([
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212
    ])

    Fx_n2_comb = np.array([
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748, 4.40604748, 4.40604748, 4.40604748, 4.40604748,
        4.40604748
    ])

    Fy_n2_comb = np.array([
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
        -1.0821174
    ])
    # fmt: on

    assert_allclose(mis_comb.forces[mis_comb.n1 * 6 + 0, :], Fx_n1_comb, rtol=3e-2)
    assert_allclose(mis_comb.forces[mis_comb.n1 * 6 + 1, :], Fy_n1_comb, rtol=3e-2)

    assert_allclose(mis_comb.forces[mis_comb.n2 * 6 + 0, :], Fx_n2_comb, rtol=3e-2)
    assert_allclose(mis_comb.forces[mis_comb.n2 * 6 + 1, :], Fy_n2_comb, rtol=3e-2)


@pytest.fixture
def mis_par(rotor, common_parameters):

    return rotor.run_misalignment(mis_type="parallel", **common_parameters)


def test_mis_par_parameters(mis_par):
    assert mis_par.dt == 0.1
    assert mis_par.tI == 0
    assert mis_par.tF == 5
    assert mis_par.kd == 40 * 10 ** (3)
    assert mis_par.ks == 38 * 10 ** (3)
    assert mis_par.eCOUPx == 2 * 10 ** (-4)
    assert mis_par.eCOUPy == 2 * 10 ** (-4)
    assert mis_par.misalignment_angle == 5 * np.pi / 180
    assert mis_par.TD == 0
    assert mis_par.TL == 0
    assert mis_par.n1 == 0
    assert mis_par.speed == 125.66370614359172


def test_mis_par_forces(mis_par):
    # fmt: off
    Fx_n1_par = np.array([
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313, -6.78313, -6.78313, -6.78313,
        -6.78313, -6.78313, -6.78313
    ])

    Fy_n1_par = np.array([
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212, 1.08212,
        1.08212, 1.08212
    ])

    Fx_n2_par = np.array([
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313, 6.78313,
        6.78313, 6.78313
    ])

    Fy_n2_par = np.array([
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212, -1.08212, -1.08212, -1.08212,
        -1.08212, -1.08212, -1.08212
    ])
    # fmt: on

    assert_allclose(mis_par.forces[mis_par.n1 * 6 + 0, :], Fx_n1_par, rtol=3e-2)
    assert_allclose(mis_par.forces[mis_par.n1 * 6 + 1, :], Fy_n1_par, rtol=3e-2)

    assert_allclose(mis_par.forces[mis_par.n2 * 6 + 0, :], Fx_n2_par, rtol=3e-2)
    assert_allclose(mis_par.forces[mis_par.n2 * 6 + 1, :], Fy_n2_par, rtol=3e-2)


@pytest.fixture
def mis_ang(rotor, common_parameters):

    return rotor.run_misalignment(mis_type="angular", **common_parameters)


def test_mis_ang_parameters(mis_ang):
    assert mis_ang.dt == 0.1
    assert mis_ang.tI == 0
    assert mis_ang.tF == 5
    assert mis_ang.kd == 40 * 10 ** (3)
    assert mis_ang.ks == 38 * 10 ** (3)
    assert mis_ang.eCOUPx == 2 * 10 ** (-4)
    assert mis_ang.eCOUPy == 2 * 10 ** (-4)
    assert mis_ang.misalignment_angle == 5 * np.pi / 180
    assert mis_ang.TD == 0
    assert mis_ang.TL == 0
    assert mis_ang.n1 == 0
    assert mis_ang.speed == 125.66370614359172


def test_mis_ang_forces(mis_ang):
    # fmt: off
    Fx_n1_ang = np.array([
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708, 2.37708,
        2.37708, 2.37708
    ])

    Fy_n1_ang = np.array([
        -0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.
    ])

    Fx_n2_ang = np.array([
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708, -2.37708, -2.37708, -2.37708,
        -2.37708, -2.37708, -2.37708
    ])

    Fy_n2_ang = np.array([
         0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
        -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
        -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
        -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.
    ])
    # fmt: on

    assert_allclose(mis_ang.forces[mis_ang.n1 * 6 + 0, :], Fx_n1_ang, rtol=3e-2)
    assert_allclose(mis_ang.forces[mis_ang.n1 * 6 + 1, :], Fy_n1_ang, atol=1e-6)

    assert_allclose(mis_ang.forces[mis_ang.n2 * 6 + 0, :], Fx_n2_ang, rtol=3e-2)
    assert_allclose(mis_ang.forces[mis_ang.n2 * 6 + 1, :], Fy_n2_ang, atol=1e-6)


@pytest.fixture
def mis_rigid(rotor):
    unbalance_magnitudet = np.array([5e-4, 0])
    unbalance_phaset = Q_(np.array([-90.0, 0.0]), "degrees")

    return rotor.run_misalignment(
        coupling="rigid",
        dt=0.0001,
        tI=0,
        tF=0.005,
        eCOUP=2e-4,
        TD=0,
        TL=0,
        n1=0,
        speed=Q_(1200, "RPM"),
        unbalance_magnitude=unbalance_magnitudet,
        unbalance_phase=unbalance_phaset,
        print_progress=False,
    )


def test_mis_rigid_parameters(mis_rigid):
    assert mis_rigid.dt == 0.0001
    assert mis_rigid.tI == 0
    assert mis_rigid.tF == 0.005
    assert mis_rigid.eCOUP == 2e-4
    assert mis_rigid.TD == 0
    assert mis_rigid.TL == 0
    assert mis_rigid.n1 == 0
    assert mis_rigid.speed == 125.66370614359172


def test_mis_rigid_forces(mis_rigid):
    # fmt: off
    Fx_n1_rig = np.array([
            0.     ,     4.31682,    17.26592,    38.84351,    69.04359,
          107.85803,   155.27676,   211.28794,   275.87817,   349.03266,
          430.73544,   520.9695 ,   619.71696,   726.95916,   842.67672,
          966.84955,  1099.45687,  1240.47709,  1389.8878 ,  1547.66558,
         1713.78589,  1888.22299,  2070.94971,  2261.93744,  2461.15597,
         2668.57346,  2884.15645,  3107.86985,  3339.67703,  3579.53994,
         3827.41925,  4083.27451,  4347.06438,  4618.74677,  4898.27908,
         5185.61834,  5480.72137,  5783.54484,  6094.04533,  6412.17932,
         6737.90309,  7071.1726 ,  7411.94329,  7760.16982,  8115.80585,
         8478.80363,  8849.11381,  9226.68502,  9611.46366, 10003.39363,
        10402.41613
    ])
    
    Fy_n1_rig = np.array([
             0.     ,   -687.04194,  -1373.94823,  -2060.59157,
         -2746.84626,  -3432.58871,  -4117.6979 ,  -4802.05574,
         -5485.54725,  -6168.06069,  -6849.48752,  -7529.72223,
         -8208.66208,  -8886.20674,  -9562.25785, -10236.71857,
        -10909.49302, -11580.48583, -12249.60164, -12916.74468,
        -13581.81844, -14244.72539, -14905.36686, -15563.64295,
        -16219.4526 , -16872.69375, -17523.26358, -18171.05879,
        -18815.97606, -19457.91233, -20096.7653 , -20732.43379,
        -21364.81807, -21993.82016, -22619.34409, -23241.29595,
        -23859.58398, -24474.11847, -25084.81159, -25691.57716,
        -26294.33031, -26892.98709, -27487.46407, -28077.67788,
        -28663.54481, -29244.98043, -29821.89922, -30394.21433,
        -30961.83738, -31524.67842, -32082.6459
    ])

    Fx_n2_rig = np.array([
            0.     ,     -4.31682,    -17.26592,    -38.84351,
          -69.04359,   -107.85803,   -155.27676,   -211.28794,
         -275.87817,   -349.03266,   -430.73544,   -520.9695 ,
         -619.71696,   -726.95916,   -842.67672,   -966.84955,
        -1099.45687,  -1240.47709,  -1389.8878 ,  -1547.66558,
        -1713.78589,  -1888.22299,  -2070.94971,  -2261.93744,
        -2461.15597,  -2668.57346,  -2884.15645,  -3107.86985,
        -3339.67703,  -3579.53994,  -3827.41925,  -4083.27451,
        -4347.06438,  -4618.74677,  -4898.27908,  -5185.61834,
        -5480.72137,  -5783.54484,  -6094.04533,  -6412.17932,
        -6737.90309,  -7071.1726 ,  -7411.94329,  -7760.16982,
        -8115.80585,  -8478.80363,  -8849.11381,  -9226.68502,
        -9611.46366, -10003.39363, -10402.41613
    ])

    Fy_n2_rig = np.array([
            0.     ,   687.04194,  1373.94823,  2060.59157,  2746.84626,
         3432.58871,  4117.6979 ,  4802.05574,  5485.54725,  6168.06069,
         6849.48752,  7529.72223,  8208.66208,  8886.20674,  9562.25785,
        10236.71857, 10909.49302, 11580.48583, 12249.60164, 12916.74468,
        13581.81844, 14244.72539, 14905.36686, 15563.64295, 16219.4526 ,
        16872.69375, 17523.26358, 18171.05879, 18815.97606, 19457.91233,
        20096.7653 , 20732.43379, 21364.81807, 21993.82016, 22619.34409,
        23241.29595, 23859.58398, 24474.11847, 25084.81159, 25691.57716,
        26294.33031, 26892.98709, 27487.46407, 28077.67788, 28663.54481,
        29244.98043, 29821.89922, 30394.21433, 30961.83738, 31524.67842,
        32082.6459
    ])
    # fmt: on

    assert_allclose(mis_rigid.forces[mis_rigid.n1 * 6 + 0, :], Fx_n1_rig, rtol=3e-2)
    assert_allclose(mis_rigid.forces[mis_rigid.n1 * 6 + 1, :], Fy_n1_rig, rtol=3e-2)

    assert_allclose(mis_rigid.forces[mis_rigid.n2 * 6 + 0, :], Fx_n2_rig, rtol=3e-2)
    assert_allclose(mis_rigid.forces[mis_rigid.n2 * 6 + 1, :], Fy_n2_rig, rtol=3e-2)
